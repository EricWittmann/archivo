/*
 * Copyright 2015-2016 Todd Kulesza <todd@dropline.net>.
 *
 * This file is part of Archivo.
 *
 * Archivo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Archivo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Archivo.  If not, see <http://www.gnu.org/licenses/>.
 */

package net.straylightlabs.archivo.model;

import net.straylightlabs.archivo.Archivo;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Model an FFSplit list, as generated by Comskip.
 */
public class FFSplitList {
    private final List<Segment> segmentsToKeep;

    /**
     * Create a new FFSplitList from a standard split file.
     */
    @SuppressWarnings("unused")
    public static FFSplitList createFromFile(Path input) throws IOException {
        List<Segment> toKeep = parseFFSkipFile(input);
        return new FFSplitList(toKeep);
    }

    public static FFSplitList createFromFileWithOffset(Path input, double offset) throws IOException {
        List<Segment> toKeep = parseFFSkipFile(input, offset);
        return new FFSplitList(toKeep);
    }

    private static List<Segment> parseFFSkipFile(Path file) throws IOException {
        return parseFFSkipFile(file, 0);
    }

    private static List<Segment> parseFFSkipFile(Path file, double offset) throws IOException {
        if (!Files.isReadable(file)) {
            throw new IOException("File is not readable");
        } else if (Files.isDirectory(file)) {
            throw new IOException("Path is a directory, not an EDL file");
        }

        List<Segment> segments = new ArrayList<>();
        try (BufferedReader reader = Files.newBufferedReader(file)) {
            for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                try {
                    Segment segment = Segment.fromString(line, offset);
                    segments.add(segment);
                } catch (IllegalArgumentException e) {
                    Archivo.logger.error("Error parsing EDL line '{}': invalid format", line);
                }
            }
        }
        return segments;
    }

    private FFSplitList(List<Segment> toCut) {
        segmentsToKeep = toCut;
    }

    @Override
    public String toString() {
        return "FFSplitList{" +
                "segmentsToKeep=" + segmentsToKeep +
                '}';
    }

    /**
     * Returns a list of time segments to keep.
     */
    public List<Segment> getSegmentsToKeep() {
        return Collections.unmodifiableList(segmentsToKeep);
    }

    public static class Segment {
        private final double startTime;
        private final double duration;
        private final double offset;

        private static final Pattern FFSPLIT_LINE_PATTERN = Pattern.compile("-ss\\s+([\\d\\.]+)\\s+-t\\s+([\\d\\.]+)");

        /**
         * Parse a line from an FFSplit file.
         */
        public static Segment fromString(String line, double offset) {
            Matcher matcher = FFSPLIT_LINE_PATTERN.matcher(line);
            if (matcher.find()) {
                double start = Double.parseDouble(matcher.group(1));
                double duration = Double.parseDouble(matcher.group(2));
                return new Segment(start, duration, offset);
            } else {
                throw new IllegalArgumentException("Input does not look like an FFSplit line");
            }
        }

        public Segment(double startTime, double duration, double offset) {
            this.startTime = startTime;
            this.duration = duration;
            this.offset = offset;
        }

        /**
         * Create a list representing the input arguments FFmpeg will need to trim a video to this segment.
         */
        public List<String> buildFFmpegInputParamList() {
            List<String> params = new ArrayList<>();
            params.add("-ss");
            params.add(String.format("%1.3f", startTime + offset));
            return params;
        }

        /**
         * Create a list representing the output arguments FFmpeg will need to trim a video to this segment.
         */
        public List<String> buildFFmpegOutputParamList() {
            List<String> params = new ArrayList<>();
            params.add("-t");
            params.add(String.format("%1.3f", duration));
            return params;
        }

        @Override
        public String toString() {
            return "Segment{" +
                    "startTime=" + startTime +
                    ", duration=" + duration +
                    ", offset=" + offset +
                    '}';
        }
    }
}
